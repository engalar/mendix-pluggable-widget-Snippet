// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
import "mx-global";
import { Big } from "big.js";

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * @param {string} widgetCommonName - 组件属性 Common -> Name
 * @param {MxObject} contextObj
 * @returns {Promise.<void>}
 */
export async function JavaScript_action(widgetCommonName, contextObj) {
	// BEGIN USER CODE
	return new Promise((resolve, reject) => {
		d3.csv("finance-charts-apple.csv", function(err, rows) {
			if (err) {
				reject(err);
			}

			function unpack(rows, key) {
				return rows.map(function(row) { return row[key]; });
			}


			var trace1 = {
				type: "scatter",
				mode: "lines",
				name: 'AAPL High',
				x: unpack(rows, 'Date'),
				y: unpack(rows, 'AAPL.High'),
				line: { color: '#17BECF' }
			}

			var trace2 = {
				type: "scatter",
				mode: "lines",
				name: 'AAPL Low',
				x: unpack(rows, 'Date'),
				y: unpack(rows, 'AAPL.Low'),
				line: { color: '#7F7F7F' }
			}

			var data = [trace1, trace2];

			var layout = {
				title: 'Time Series with Rangeslider',
				xaxis: {
					autorange: true,
					range: ['2015-02-17', '2017-02-16'],
					rangeselector: {
						buttons: [
							{
								count: 1,
								label: '1m',
								step: 'month',
								stepmode: 'backward'
							},
							{
								count: 6,
								label: '6m',
								step: 'month',
								stepmode: 'backward'
							},
							{ step: 'all' }
						]
					},
					rangeslider: { range: ['2015-02-17', '2017-02-16'] },
					type: 'date'
				},
				yaxis: {
					autorange: true,
					range: [86.8700008333, 138.870004167],
					type: 'linear'
				}
			};

			const divContainer = document.querySelector('.mx-name-' + widgetCommonName);

			Plotly.newPlot(divContainer, data, layout, { responsive: true });
			// Subscribe to changes in a specific attribute of an MxObject
			var subscription = mx.data.subscribe({
				guid: contextObj.getGuid(),
				attr: "Attribute",
				callback: function(guid, attr, value) {
					Plotly.relayout(divContainer, { title: value });
				}
			});

			// mx.data.unsubscribe(subscription);
			resolve();
		})
	});
	// END USER CODE
}
